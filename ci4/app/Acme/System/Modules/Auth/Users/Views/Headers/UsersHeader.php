<?php

/**
 * Load the theme default header to before loading Users
 *
 * @author      ThemeXenia
 * @copyright   Acme (c) 2019
 * @version     1.0.0
 * @link        https://acme.app
 * @since       1.0.0
 * @package     Auth
 * @subpackage  Users
 */

// Override config value by user params
if($params){
    
    foreach ($params as $param_key=>$param_value){
        
        $config[$param_key] = $param_value;
        
    }
    
}

// NOTE: Do not edit this file

// Path to the template file
$viewPath = 'Acme/Layouts/Themes/' . $theme . '/Backend/Headers/'. $config['views.header.layout'] . '/header_' . $config['views.header.style'];

// Path to the system view hooks file
$viewSystemHooksPath = 'Acme/Layouts/Themes/' . $theme . '/Hooks/';

// Path to the users view hooks file
$viewUsersHooksPath = 'Acme/System/Modules/Auth/Users/Views/Hooks/';

// Checks whether the page actually exists.
// PHP’s native is_file() function is used to check whether the file is where it’s expected to be.
// The PageNotFoundException is a CodeIgniter exception that causes the default error page to show.
if (!is_file(ROOTPATH . $viewPath . '.php')) {

    ob_get_clean();

    //Clean (erase) the output buffer and turn off output buffering
    ob_end_clean();

    // Whoops, we don't have a page for that!
    throw new \CodeIgniter\Exceptions\PageNotFoundException($viewPath);

} else {

    // Adjust the path so that the view parser can locate our template
    $layoutFile = '../../' . $viewPath;

    // Adjust the path so that the view parser can locate system view hooks
    $hooksPathSystem = '../../' . $viewSystemHooksPath;

    // Adjust the path so that the view parser can locate users view hooks
    $hooksPathUsers = '../../' . $viewUsersHooksPath;

    // Get views from hooks

    // Get the content to display immediately after the <head> open tag
    $contentAfterHeadOpen[] = view($hooksPathSystem . "SystemHeadAfterOpen");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("SystemHeadAfterOpen", $config["customHooks"])) {
                    // Add hook view content
                    $contentAfterHeadOpen[] = $config["customHooks"]["SystemHeadAfterOpen"];

                }

            }

        }

    }

    $contentAfterHeadOpen[] = view($hooksPathUsers . "UsersHeadAfterOpen");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("UserHeadAfterOpen", $config["customHooks"])) {
                    // Add hook view content
                    $contentAfterHeadOpen[] = $config["customHooks"]["UserHeadAfterOpen"];

                }

            }

        }

    }

    // Get the user custom styles for this specific module
    $contentCustomStyles[] = view($hooksPathSystem . "SystemCustomStyles");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("SystemCustomStyles", $config["customHooks"])) {
                    // Add hook view content
                    $contentCustomStyles[] = $config["customHooks"]["SystemCustomStyles"];

                }

            }

        }

    }

    $contentCustomStyles[] = view($hooksPathUsers . "UsersCustomStyles");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("UsersCustomStyles", $config["customHooks"])) {
                    // Add hook view content
                    $contentCustomStyles[] = $config["customHooks"]["UsersCustomStyles"];

                }

            }

        }

    }

    // Get the content to display immediately before the <head> close tag
    $contentBeforeHeadClose[] = view($hooksPathSystem . "SystemHeadBeforeClose");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("SystemHeadBeforeClose", $config["customHooks"])) {
                    // Add hook view content
                    $contentBeforeHeadClose[] = $config["customHooks"]["SystemHeadBeforeClose"];

                }

            }

        }

    }

    $contentBeforeHeadClose[] = view($hooksPathUsers . "UsersHeadBeforeClose");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("UsersHeadBeforeClose", $config["customHooks"])) {
                    // Add hook view content
                    $contentBeforeHeadClose[] = $config["customHooks"]["UsersHeadBeforeClose"];

                }

            }

        }

    }

    // Get the content to display immediately after the <body> open tag
    $contentAfterBodyOpen[] = view($hooksPathSystem . "SystemBodyAfterOpen");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("SystemBodyAfterOpen", $config["customHooks"])) {
                    // Add hook view content
                    $contentAfterBodyOpen[] = $config["customHooks"]["SystemBodyAfterOpen"];

                }

            }

        }

    }

    $contentAfterBodyOpen[] = view($hooksPathUsers . "UsersBodyAfterOpen");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("UsersBodyAfterOpen", $config["customHooks"])) {
                    // Add hook view content
                    $contentAfterBodyOpen[] = $config["customHooks"]["UsersBodyAfterOpen"];

                }

            }

        }

    }


    // Consolidate the views
    $viewData = array(
        "contentAfterHeadOpen" => implode("\r\n", $contentAfterHeadOpen),
        "contentCustomStyles" => implode("\r\n", $contentCustomStyles),
        "contentBeforeHeadClose" => implode("\r\n", $contentBeforeHeadClose),
        "contentAfterBodyOpen" => implode("\r\n", $contentAfterBodyOpen)
    );

    // Render the moduletemplate :: modulecomponent layout
    echo view($layoutFile, $viewData);

}
