<?php

/**
 * Load the theme default footer to after loading Users
 *
 * @author      ThemeXenia
 * @copyright   Acme (c) 2019
 * @version     1.0.0
 * @link        https://acme.app
 * @since       1.0.0
 * @package     Auth
 * @subpackage  Users
 */

// Override config value by user params
if($params){
    
    foreach ($params as $param_key=>$param_value){
        
        $config[$param_key] = $param_value;
        
    }
    
}

// NOTE: Do not edit this file

// Path to the template file
$viewPath = 'Acme/Layouts/Themes/' . $theme . '/Backend/Footers/'. $config['views.footer.layout'] . '/footer_' . $config['views.footer.style'];

// Path to the system view hooks file
$viewSystemHooksPath = 'Acme/Layouts/Themes/' . $theme . '/Hooks/';

// Path to the users view hooks file
$viewUsersHooksPath = 'Acme/System/Modules/Auth/Users/Views/Hooks/';

// Checks whether the page actually exists.
// PHP’s native is_file() function is used to check whether the file is where it’s expected to be.
// The PageNotFoundException is a CodeIgniter exception that causes the default error page to show.
if (!is_file(ROOTPATH . $viewPath . '.php')) {

    ob_get_clean();

    //Clean (erase) the output buffer and turn off output buffering
    ob_end_clean();

    // Whoops, we don't have a page for that!
    throw new \CodeIgniter\Exceptions\PageNotFoundException($viewPath);

} else {

    // Adjust the path so that the view parser can locate our template
    $layoutFile = '../../' . $viewPath;

    // Adjust the path so that the view parser can locate system view hooks
    $hooksPathSystem = '../../' . $viewSystemHooksPath;

    // Adjust the path so that the view parser can locate users view hooks
    $hooksPathUsers = '../../' . $viewUsersHooksPath;

    // Get the content to display immediately after the <footer> open tag
    $contentAfterFooterOpen[] = view($hooksPathSystem . "SystemFooterAfterOpen");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("SystemFooterAfterOpen", $config["customHooks"])) {
                    // Add hook view content
                    $contentAfterFooterOpen[] = $config["customHooks"]["SystemFooterAfterOpen"];

                }

            }

        }

    }

    $contentAfterFooterOpen[] = view($hooksPathUsers . "UsersFooterAfterOpen");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("UsersFooterAfterOpen", $config["customHooks"])) {
                    // Add hook view content
                    $contentAfterFooterOpen[] = $config["customHooks"]["UsersFooterAfterOpen"];

                }

            }

        }

    }

    // Get the user custom scripts for this specific module
    $contentCustomScripts[] = view($hooksPathSystem . "SystemCustomScripts");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("SystemCustomScripts", $config["customHooks"])) {
                    // Add hook view content
                    $contentCustomScripts[] = $config["customHooks"]["SystemCustomScripts"];

                }

            }

        }

    }

    $contentCustomScripts[] = view($hooksPathUsers . "UsersCustomScripts");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("UsersCustomScripts", $config["customHooks"])) {
                    // Add hook view content
                    $contentCustomScripts[] = $config["customHooks"]["UsersCustomScripts"];

                }

            }

        }

    }

    // Get the content to display immediately before the <footer> close tag
    $contentBeforeFooterClose[] = view($hooksPathSystem . "SystemFooterBeforeClose");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("SystemFooterBeforeClose", $config["customHooks"])) {
                    // Add hook view content
                    $contentBeforeFooterClose[] = $config["customHooks"]["SystemFooterBeforeClose"];

                }

            }

        }

    }

    $contentBeforeFooterClose[] = view($hooksPathUsers . "UsersFooterBeforeClose");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("UsersFooterBeforeClose", $config["customHooks"])) {
                    // Add hook view content
                    $contentBeforeFooterClose[] = $config["customHooks"]["UsersFooterBeforeClose"];

                }

            }

        }

    }

    // Get the content to display immediately before the <body> close tag
    $contentBeforeBodyClose[] = view($hooksPathSystem . "SystemBodyBeforeClose");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("SystemBodyBeforeClose", $config["customHooks"])) {
                    // Add hook view content
                    $contentBeforeBodyClose[] = $config["customHooks"]["SystemBodyBeforeClose"];

                }

            }

        }

    }

    $contentBeforeBodyClose[] = view($hooksPathUsers . "UsersBodyBeforeClose");

    // If the config is not empty
    if (isset($config)) {

        // Check if there are any custom hooks from the database
        if (array_key_exists("customHooks", $config)) {

            // Verify if the object is an array
            if (is_array($config["customHooks"])) {

                // Check to see if the hook is applicable
                // by verifying the looking at the hook name
                if (array_key_exists("UsersBodyBeforeClose", $config["customHooks"])) {
                    // Add hook view content
                    $contentBeforeBodyClose[] = $config["customHooks"]["UsersBodyBeforeClose"];

                }

            }

        }

    }


    // Consolidate the views
    $viewData = array(
        "contentAfterFooterOpen" => implode("\r\n", $contentAfterFooterOpen),
        "contentCustomScripts" => implode("\r\n", $contentCustomScripts),
        "contentBeforeFooterClose" => implode("\r\n", $contentBeforeFooterClose),
        "contentBeforeBodyClose" => implode("\r\n", $contentBeforeBodyClose)
    );

    // Render the moduletemplate :: modulecomponent layout
    echo view($layoutFile, $viewData);

}
